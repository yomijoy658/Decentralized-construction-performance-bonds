;; Performance Bond Manager
(define-constant contract-owner tx-sender)
(define-constant err-not-found (err u101))
(define-constant err-unauthorized (err u102))
(define-constant err-invalid-status (err u103))
(define-constant err-insufficient-funds (err u104))
(define-constant bond-active u1)
(define-constant bond-completed u2)
(define-constant bond-claimed u3)
(define-constant bond-cancelled u4)
(define-constant milestone-pending u1)
(define-constant milestone-completed u2)
(define-data-var bond-id-nonce uint u0)
(define-data-var milestone-id-nonce uint u0)
(define-data-var total-bonds uint u0)
(define-data-var total-bond-value uint u0)
(define-map bonds { bond-id: uint } { contractor: principal, project-owner: principal, bond-amount: uint, project-name: (string-ascii 100), status: uint, issued-at: uint, completion-date: uint })
(define-map milestones { milestone-id: uint } { bond-id: uint, description: (string-ascii 200), payment-amount: uint, status: uint, completed-at: uint })
(define-map bond-collateral { bond-id: uint } { amount: uint, deposited: bool })
(define-map claims { bond-id: uint } { claimant: principal, amount: uint, reason: (string-ascii 200), filed-at: uint, approved: bool })
(define-map contractor-bonds { contractor: principal, index: uint } { bond-id: uint })
(define-map contractor-bond-count { contractor: principal } { count: uint })
(define-private (get-next-bond-id) (let ((current-id (var-get bond-id-nonce))) (var-set bond-id-nonce (+ current-id u1)) current-id))
(define-private (get-next-milestone-id) (let ((current-id (var-get milestone-id-nonce))) (var-set milestone-id-nonce (+ current-id u1)) current-id))
(define-public (issue-bond (project-owner principal) (bond-amount uint) (project-name (string-ascii 100)) (completion-date uint)) (let ((bond-id (get-next-bond-id)) (contractor-count (default-to { count: u0 } (map-get? contractor-bond-count { contractor: tx-sender })))) (asserts! (> bond-amount u0) err-invalid-status) (try! (stx-transfer? bond-amount tx-sender (as-contract tx-sender))) (map-set bonds { bond-id: bond-id } { contractor: tx-sender, project-owner: project-owner, bond-amount: bond-amount, project-name: project-name, status: bond-active, issued-at: stacks-block-height, completion-date: completion-date }) (map-set bond-collateral { bond-id: bond-id } { amount: bond-amount, deposited: true }) (map-set contractor-bonds { contractor: tx-sender, index: (get count contractor-count) } { bond-id: bond-id }) (map-set contractor-bond-count { contractor: tx-sender } { count: (+ (get count contractor-count) u1) }) (var-set total-bonds (+ (var-get total-bonds) u1)) (var-set total-bond-value (+ (var-get total-bond-value) bond-amount)) (ok bond-id)))
(define-public (create-milestone (bond-id uint) (description (string-ascii 200)) (payment-amount uint)) (let ((bond (unwrap! (map-get? bonds { bond-id: bond-id }) err-not-found)) (milestone-id (get-next-milestone-id))) (asserts! (is-eq tx-sender (get project-owner bond)) err-unauthorized) (map-set milestones { milestone-id: milestone-id } { bond-id: bond-id, description: description, payment-amount: payment-amount, status: milestone-pending, completed-at: u0 }) (ok milestone-id)))
(define-public (complete-milestone (milestone-id uint)) (let ((milestone (unwrap! (map-get? milestones { milestone-id: milestone-id }) err-not-found)) (bond (unwrap! (map-get? bonds { bond-id: (get bond-id milestone) }) err-not-found))) (asserts! (is-eq tx-sender (get project-owner bond)) err-unauthorized) (map-set milestones { milestone-id: milestone-id } (merge milestone { status: milestone-completed, completed-at: stacks-block-height })) (try! (as-contract (stx-transfer? (get payment-amount milestone) tx-sender (get contractor bond)))) (ok true)))
(define-public (complete-bond (bond-id uint)) (let ((bond (unwrap! (map-get? bonds { bond-id: bond-id }) err-not-found)) (collateral (unwrap! (map-get? bond-collateral { bond-id: bond-id }) err-not-found))) (asserts! (is-eq tx-sender (get project-owner bond)) err-unauthorized) (asserts! (is-eq (get status bond) bond-active) err-invalid-status) (try! (as-contract (stx-transfer? (get amount collateral) tx-sender (get contractor bond)))) (map-set bonds { bond-id: bond-id } (merge bond { status: bond-completed })) (ok true)))
(define-public (file-claim (bond-id uint) (amount uint) (reason (string-ascii 200))) (let ((bond (unwrap! (map-get? bonds { bond-id: bond-id }) err-not-found))) (asserts! (is-eq tx-sender (get project-owner bond)) err-unauthorized) (map-set claims { bond-id: bond-id } { claimant: tx-sender, amount: amount, reason: reason, filed-at: stacks-block-height, approved: false }) (ok true)))
(define-public (approve-claim (bond-id uint)) (let ((bond (unwrap! (map-get? bonds { bond-id: bond-id }) err-not-found)) (claim (unwrap! (map-get? claims { bond-id: bond-id }) err-not-found)) (collateral (unwrap! (map-get? bond-collateral { bond-id: bond-id }) err-not-found))) (try! (as-contract (stx-transfer? (get amount claim) tx-sender (get claimant claim)))) (map-set claims { bond-id: bond-id } (merge claim { approved: true })) (map-set bonds { bond-id: bond-id } (merge bond { status: bond-claimed })) (ok true)))
(define-read-only (get-bond (bond-id uint)) (map-get? bonds { bond-id: bond-id }))
(define-read-only (get-milestone (milestone-id uint)) (map-get? milestones { milestone-id: milestone-id }))
(define-read-only (get-claim (bond-id uint)) (map-get? claims { bond-id: bond-id }))
(define-read-only (get-contractor-bond (contractor principal) (index uint)) (map-get? contractor-bonds { contractor: contractor, index: index }))
(define-read-only (get-platform-stats) { total-bonds: (var-get total-bonds), total-value: (var-get total-bond-value) })
